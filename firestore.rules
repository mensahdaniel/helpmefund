rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isStudent() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }

    function isSponsor() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'sponsor';
    }

    // Add rules for notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() &&
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() &&
        resource.data.userId == request.auth.uid;
      allow delete: if isAdmin() ||
        (isAuthenticated() && resource.data.userId == request.auth.uid);
    }

    // Add rules for activities collection
    match /activities/{activityId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /projects/{projectId} {
      allow read: if true;
      allow create: if isAuthenticated() && isStudent();
      // Allow updates if admin, project owner, or sponsor (for funding)
      allow update: if isAuthenticated() && (
        isAdmin() ||
        (isStudent() && resource.data.createdBy == request.auth.uid) ||
        (isSponsor() && request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['currentFunding', 'sponsors']))
      );
      allow delete: if isAdmin() ||
        (isStudent() && resource.data.createdBy == request.auth.uid);
    }

    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAdmin() || request.auth.uid == userId;
      allow delete: if isAdmin();
    }

    match /donations/{donationId} {
      allow read: if true;
      allow create: if isAuthenticated() && isSponsor();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Add rules for investments collection
    match /investments/{investmentId} {
      allow read: if isAuthenticated() && (
        resource.data.sponsorId == request.auth.uid ||
        isAdmin()
      );
      // Allow sponsors to create investments
      allow create: if isAuthenticated() && isSponsor();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Add rules for comments collection if needed
    match /comments/{commentId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() &&
        resource.data.userId == request.auth.uid;
      allow delete: if isAdmin() ||
        (isAuthenticated() && resource.data.userId == request.auth.uid);
    }
  }
}
